// Generated by CoffeeScript 1.6.3
(function() {
  var bless, colors, css, fs, pjson, print, program;

  print = require('util').print;

  colors = require('colors');

  css = require('css');

  fs = require('fs');

  program = require('commander');

  pjson = require("" + __dirname + "/../package.json");

  bless = function() {
    var SELECTOR_LIMIT, input, newAst, output;
    SELECTOR_LIMIT = 4095;
    program.version(pjson.version).usage('<input file> [<output file>] [options]').option('-f, --force', 'modify the input file provided'.yellow).parse(process.argv);
    newAst = function(rules) {
      return {
        type: 'stylesheet',
        stylesheet: {
          rules: rules
        }
      };
    };
    input = program.args[0];
    if (!input) {
      console.log('blessc: no input provided'.red);
      process.exit(1);
    }
    if (input === !'-' && /\.css/.test(input)) {
      console.log('blessc: input file is not a .css file'.red);
      process.exit(1);
    }
    output = program.args[1];
    output = output || input;
    if (output === '-') {
      console.log('blessc: no output file provided'.red);
      process.exit(1);
    }
    if (output === input && !program.force) {
      console.log('blessc: use --force or -f to modify the input file'.red);
      process.exit(1);
    }
    return fs.readFile(input, 'utf8', function(err, data) {
      var ast, nestedRule, newAsts, numSelectors, rule, rulesCache, _i, _j, _len, _len1, _ref, _ref1;
      if (err) {
        throw err;
      }
      ast = css.parse(data);
      numSelectors = 0;
      rulesCache = [];
      newAsts = [];
      _ref = ast.stylesheet.rules;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        rule = _ref[_i];
        switch (rule.type) {
          case 'rule':
            numSelectors += rule.selectors.length;
            break;
          default:
            _ref1 = rule.rules;
            for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
              nestedRule = _ref1[_j];
              numSelectors += nestedRule.selectors.length;
            }
        }
        rulesCache.push(rule);
        if (numSelectors > 4095) {
          newAsts.push(newAst(rulesCache));
          rulesCache = [];
        }
      }
      if (!newAsts.length) {
        newAsts.push(newAst(ast.stylesheet.rules));
      }
      return console.log(newAsts);
    });
  };

  module.exports = bless;

}).call(this);
