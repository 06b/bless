#!/usr/bin/env node

var path = require('path'),
    fs = require('fs'),
    sys = require('sys');

require.paths.unshift(path.join(__dirname, '..', 'lib'));

var bless = require('bless');
var args = process.argv.slice(1);
var options = {
    cleanup: true,
    compress: false
};

args = args.filter(function (arg) {
    var match;

    if (match = arg.match(/^--?([a-z][0-9a-z-]*)(?:=([^\s]+))?$/i)) { arg = match[1] }
    else { return arg }

    switch (arg) {
        case 'n':
        case 'no-cleanup':
            options.cleanup = false;
            break;
        case 'v':
        case 'version':
            sys.puts("blessc " + bless.version.join('.') + " (CSS Post-processor) [JavaScript]");
            process.exit(0);
        case 'h':
        case 'help':
            sys.puts("usage: blessc source [destination]");
            process.exit(0);
        case 'x':
        case 'compress':
            options.compress = true;
            break;
    }
});

var input = args[1];
if (input && input[0] != '/' && input != '-') {
    input = path.join(process.cwd(), input);
}
var output = args[2];
if (output && output[0] != '/') {
    output = path.join(process.cwd(), output);
}

var fd;

if (! input) {
    sys.puts("blessc: no input file");
    process.exit(1);
}

output = output ? output : input;

if (output == '-') {
    sys.puts("blessc: no output file");
    process.exit(1);
}

var parseCss = function (e, data) {
    if (e) {
        sys.puts("blessc: " + e.message);
        process.exit(1);
    }
    
    new(bless.Parser)({
        input: data,
        filename: output,
        options: options
    }).parse(data, function (err, files) {
        if (err) {
            throw err;
            process.exit(1);
        } else {
            try {
                if(files.length > 1) {
                    for (i in files) {
                        var file = files[i];
                        fd = fs.openSync(file.filename, "w");
                        fs.writeSync(fd, file.content, 0, "utf8");
                    }
                }
                
                if(options.cleanup) {
                    bless.Parser.cleanup(output, function(err) {
                        if (err) throw err;
                    });
                }
            } catch (e) {
                throw e;
                process.exit(2);
            }
        }
    });
};

if (input != '-') {
    fs.readFile(input, 'utf-8', parseCss);
} else {
    process.stdin.resume();
    process.stdin.setEncoding('utf8');

    var buffer = '';
    process.stdin.on('data', function(data) {
        buffer += data;
    });

    process.stdin.on('end', function() {
        parseCss(false, buffer);
    });
}